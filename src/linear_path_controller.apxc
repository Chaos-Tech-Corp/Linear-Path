public class linear_path_controller {
    
    @Auraenabled
    public static pathDetails getPath(string recordId, string fieldName) {
        pathDetails path = new pathDetails();
        
        //find object name from recordId
        String objectName = Id.valueOf(recordID).getSObjectType().getDescribe().getName();
        
        Boolean isOppty = objectName == 'Opportunity' && fieldName == 'StageName';
        
        //get all active values for the picklist
        if (isOppty) {
            path.values = stageValues();
        }  else {
        	path.values = picklistValues(objectName, fieldName);
        }
        
		//find the current value of the picklist
        List<sObject> sobjList = Database.query('SELECT ' + fieldName + (isOppty ? ', IsClosed, IsWon' : '') + ' FROM ' + objectName + ' WHERE Id = :recordId');
        path.current = sobjList[0].get(fieldName);

        //check the Opportunity Status
        if (isOppty) {
            path.isClosed = (Boolean)sobjList[0].get('IsClosed');
            path.isLost = path.isClosed && !((Boolean)sobjList[0].get('IsWon'));
            if (path.isClosed) {
                //replace the last value with the value name
                path.values.put('Closed',(String)sobjList[0].get('StageName'));
                //path.values[path.values.size()-1] = (String)sobjList[0].get('StageName');
            }
        } else {
            path.isLost = false;
        }
        
        return path;
    }
    
    public static Map<string, string> stageValues() {
        
        Map<string, string> sourceValues = picklistValues('Opportunity','StageName');
        
        //retrieve the values from the StageName field, only active values and group all closed values under 'Close'
        Map<string, string> values = new Map<string, string>();
        for(OpportunityStage stage : [SELECT ApiName FROM OpportunityStage WHERE IsActive = true AND IsClosed = false ORDER BY SortOrder ASC]) {
            if (sourceValues.containsKey(stage.ApiName)) {
            	values.put(stage.ApiName, sourceValues.get(stage.ApiName));
            }
        }
        //values.add('Closed');
        values.put('Closed','Closed');
        return values;
    }
    
    public static Map<string, string> picklistValues(String objectName, String fieldName) {
        Map<string, string> values = new Map<string, string>();
            
        Schema.DescribeSobjectResult[] results = Schema.describeSObjects(new String[]{objectName});
        
        for(Schema.DescribeSobjectResult res : results) {
            for (Schema.PicklistEntry entry : res.fields.getMap().get(fieldName).getDescribe().getPicklistValues()) {
                if (entry.isActive()) {
                    values.put(entry.getValue(), entry.getLabel());
                }
            }
        }
        return values;
    }
    
    
    public class pathDetails {
        @Auraenabled
        public Map<string, string> values;
        @Auraenabled
        public object current;
        @Auraenabled
        public boolean isLost;
        @Auraenabled
        public boolean isClosed;
    }
}
